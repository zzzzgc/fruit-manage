package com.fruit.manage.model;

import com.fruit.manage.model.base.BaseCheckInventoryDetail;
import com.fruit.manage.util.DateAndStringFormat;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class CheckInventoryDetail extends BaseCheckInventoryDetail<CheckInventoryDetail> {
	public static final CheckInventoryDetail dao = new CheckInventoryDetail().dao();

	/**
	 * 根据条件进行分页查询
	 * @param pageNum
	 * @param pageSize
	 * @param orderBy
	 * @param isASC
	 * @param map
	 * @return
	 */
	public Page<CheckInventoryDetail> getAllInfo(Integer pageNum, Integer pageSize, String orderBy, boolean isASC, Map map){
		ArrayList<Object> params = new ArrayList<Object>();
		String selectStr ="select cid.id,cid.product_id,cid.product_name,cid.product_standard_id,cid.product_standard_name, " +
				" cid.check_inventory_id,cid.product_weight,cid.inventory_price,cid.inventory_num,cid.inventory_total_price, " +
				" cid.user_id,cid.user_name,cid.inventory_remark,cid.create_time,cid.update_time,cid.check_inventory_num ";
		StringBuilder sql = new StringBuilder();
		sql.append("from b_check_inventory_detail cid ");
		sql.append("where 1=1 ");
		if(StrKit.notBlank((String) map.get("productName"))){
			sql.append("and cid.product_name like ? ");
			params.add("%"+map.get("productName")+"%");
		}
		if(StrKit.notBlank((String)map.get("productId"))){
			sql.append("and cid.product_id like ? ");
			params.add("%"+map.get("productId")+"%");
		}
		if(StrKit.notBlank((String)map.get("productStandardName"))){
			sql.append("and cid.product_standard_name like ? ");
			params.add("%"+map.get("productStandardName")+"%");
		}
		if(StrKit.notBlank((String)map.get("productStandardId"))){
			sql.append("and cid.product_standard_id like ? ");
			params.add("%"+map.get("productStandardId")+"%");
		}
		if(StrKit.notBlank((String) map.get("checkInventoryId"))){
			sql.append("and cid.check_inventory_id = ? ");
			params.add((String) map.get("checkInventoryId"));
		}
		if (StrKit.notBlank((String) map.get("createTime")) && !"null".equals((String) map.get("createTime"))) {
			sql.append("and cid.create_time BETWEEN ? and ? ");
			params.add(map.get("createTime") + " 00:00:00");
			params.add(map.get("createTime") + " 23:59:59");
		}
		orderBy = StrKit.isBlank(orderBy) ? "cid.create_time" : orderBy;
		sql.append("order by " + orderBy + " " + (isASC ? "" : "desc "));
		return paginate(pageNum, pageSize, selectStr, sql.toString(), params.toArray());
	}

	/**
	 * 根据盘点单编号删除盘点单详细信息
	 * @param checkInventoryId 盘点单编号
	 * @return
	 */
	public boolean delCheckInventoryDetailByCIId(String checkInventoryId) {
		String sql = "DELETE from b_check_inventory_detail where check_inventory_id = ?";
		if (Db.update(sql, checkInventoryId) > 0) {
			return  true;
		}
		return false;
	}

	/**
	 * 根据规格编号 盘点库编号 开始时间和结束时间获取盘点单详细信息
	 * @param psId
	 * @param checkInventoryId
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public CheckInventoryDetail getCheckInventoryDetail(Integer psId,String checkInventoryId,String startTime,String endTime){
		String sql="SELECT " +
				"cid.id," +
				"cid.product_id, " +
				"cid.product_name, " +
				"cid.product_standard_id, " +
				"cid.product_standard_name, " +
				"cid.check_inventory_id, " +
				"cid.product_weight, " +
				"cid.inventory_price, " +
				"cid.inventory_num, " +
				"cid.inventory_total_price, " +
				"cid.user_id, " +
				"cid.user_name, " +
				"cid.inventory_remark, " +
				"cid.create_time, " +
				"cid.update_time " +
				"FROM " +
				"b_check_inventory_detail cid " +
				"WHERE " +
				"1 = 1 " +
				"AND cid.product_standard_id = ? " +
				"AND cid.check_inventory_id = ? " +
				"and cid.create_time BETWEEN ? and ?";
		return findFirst(sql,psId,checkInventoryId,startTime,endTime);
	}

	/**
	 * 根据规格编号、开始时间和结束时间
	 * @param psId 规格编号
	 * @param startTime 开始时间
	 * @param endTime 结束时间
	 * @return 盘点详细信息
	 */
	public CheckInventoryDetail getCheckInventoryDetail(Integer psId,String startTime,String endTime) {
		String sql = "SELECT cid.id,cid.product_standard_id,cid.inventory_num,cid.inventory_total_price " +
				"from b_check_inventory_detail cid " +
				"where 1=1 " +
				"and cid.product_standard_id =? " +
				"and cid.create_time BETWEEN ? and ?";
		String time= DateAndStringFormat.getNextDay(startTime, "-1");
		return findFirst(sql, psId, time + " 00:00:00", time+ " 23:59:59");
	}

	/**
	 * 根据盘点编号获取盘点详细信息
	 * @param checkInventoryId
	 * @return
	 */
	public List<CheckInventoryDetail> getCheckInventoryDetailsByCIId(String checkInventoryId) {
		String sql = "SELECT * from b_check_inventory_detail cid where cid.check_inventory_id = ? ";
		return find(sql, checkInventoryId);
	}

	/**
	 * 根据Id获取盘点单详细信息
	 * @param id
	 * @return
	 */
	public CheckInventoryDetail getCheckInventoryDetailById(String id) {
		String sql = "SELECT * from b_check_inventory_detail  where id = ?";
		return findFirst(sql, id);
	}
}
