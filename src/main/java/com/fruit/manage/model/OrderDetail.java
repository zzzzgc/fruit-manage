package com.fruit.manage.model;

import com.fruit.manage.constant.UserTypeConstant;
import com.fruit.manage.model.base.BaseOrderDetail;
import com.fruit.manage.util.ZhioDateUtils;
import com.jfinal.aop.Before;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.tx.Tx;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class OrderDetail extends BaseOrderDetail<OrderDetail> {
    public static final OrderDetail dao = new OrderDetail().dao();

    public List<OrderDetail> getOrderDetails(String orderId) {
        return dao.find("SELECT * FROM b_order_detail od WHERE od.order_id = ? ", orderId);
    }

    /**
     * 获取订单信息展示的部分 商品信息和商品规格
     *
     * @param orderid
     * @return
     */
    public List<OrderDetail> getOtherOrderDetail(String orderid) {
        // 实发数量默认等于应发数量,再由用户修改
        String sql = "SELECT\n" +
                "\to.product_name,\n" +
                "\to.id,\n" +
                "\to.product_standard_name,\n" +
                "\to.num,\n" +
                "\to.original_price,\n" +
                "\to.sell_price,\n" +
                "\to.actual_deliver_num,\n" +
                " b_o.pay_reality_need_money," +
                " ps.stock, " +
                " o.product_standard_id, " +
                "\to.actual_send_goods_num AS actual_send_goods_num,\n" +
                "\tp.brand,\n" +

                //商户规格副标题
                " ps.sub_title, " +
                " o.buy_remark, " +

                "\tps.gross_weight\n" +
                "FROM\n" +
                "\tb_order_detail AS o\n" +
                "INNER JOIN b_order AS b_o ON o.order_id= b_o.order_id\n" +
                "INNER JOIN b_product AS p ON o.product_id = p.id\n" +
                "INNER JOIN b_product_standard AS ps ON o.product_standard_id = ps.id\n" +
                "WHERE\n" +
                "\to.order_id = ?  ";
        return dao.find(sql, orderid);
    }

    /**
     * 根据订单编号获取订单详情单个表操作
     *
     * @param orderId 订单ID
     * @return 订单详情集合
     */
    public List<OrderDetail> getOrderDetailSingleTable(String orderId) {
        String sql = "select od.id,od.product_standard_id,od.actual_send_goods_num from b_order_detail od where od.order_id = ? ";
        return find(sql, orderId);
    }

    /**
     * 根据订单编号获取总额=（子订单=售价*下单量）的和
     *
     * @param orderId
     * @return
     */
    public BigDecimal getOrderTotalCost(String orderId) {
        String sql = "select sum(od.total_pay) from b_order_detail od where od.order_id= ? ";
        return Db.queryBigDecimal(sql, orderId);
    }

    /**
     * 根据订单编号获取实际需要支付的订单总金额 = (子订单=售价*实际发货数量)的和
     *
     * @param orderId
     * @return
     */
    public BigDecimal getOrderPayRealityNeedMoneyByOrderID(String orderId) {
//         2018-05-28 zgc 应收金额应该是pay_all_money(总货款=订单总金额+物流费用) 而不是 pay_reality_need_money(订单总金额)
//        String sql = "select o.pay_reality_need_money from b_order  o where o.order_id = ?";
        String sql = "select o.pay_all_money from b_order  o where o.order_id = ?";
        return Db.queryBigDecimal(sql, orderId);
    }

    /**
     * 根据订单详细编号获取订单详细
     *
     * @param id 订单详细编号
     * @return
     */
    public OrderDetail getOrderDetailById(Integer id) {
        String sql = "SELECT * from b_order_detail where id = ? ";
        return findFirst(sql, id);
    }


    /**
     * 添加订单详细
     * @param uId
     * @param orderCycleDate
     * @param businessUserId
     * @param orderId
     * @param productId
     * @param productStandardId
     * @param productName
     * @param productStandardName
     * @param originalPrice
     * @param sellPrice
     * @param num
     * @param totalPay
     * @param buyRemark
     * @return
     */
    public OrderDetail addOrderDetail(
            Integer uId,
            Date orderCycleDate,
            Integer businessUserId,
            String orderId,
            Integer productId,
            Integer productStandardId,
            String productName,
            String productStandardName,
            BigDecimal originalPrice,
            BigDecimal sellPrice,
            Integer num,
            BigDecimal totalPay,
            String buyRemark) {
        OrderDetail orderDetail = new OrderDetail();
        orderDetail.setUId(businessUserId);
        orderDetail.setOrderId(orderId);
        orderDetail.setProductId(productId);
        orderDetail.setProductStandardId(productStandardId);
        orderDetail.setProductName(productName);
        orderDetail.setProductStandardName(productStandardName);
        // 待定默认为 件
        orderDetail.setMeasureUnit("件");
        orderDetail.setOriginalPrice(originalPrice);
        orderDetail.setNum(num);
        orderDetail.setSellPrice(sellPrice);
        orderDetail.setTotalPay(totalPay);
        orderDetail.setBuyRemark(buyRemark);
        orderDetail.setCreateTime(new Date());
        orderDetail.setUpdateTime(new Date());
        orderDetail.save(UserTypeConstant.A_USER, uId, orderCycleDate);

//        orderDetail.set  Fruit_type (  fruit_type);
//        orderDetail.set  Actual_send_goods_num (  actual_send_goods_num);
//        orderDetail.set  Actual_deliver_num (  actual_deliver_num);
//        orderDetail.set  Cancel_reason (  cancel_reason);
//        orderDetail.set  Cancel_time (  cancel_time);
        return orderDetail;
    }


    /**
     * 非特殊情况不可用
     * 生成订单流水
     * @param orderId
     * @param productId
     * @param productStandardId
     * @param changeNum
     * @param orderCreateTime
     * @return
     */
    private boolean getOrderLog(String orderId, Integer productId, Integer productStandardId, Integer changeNum, Date orderCreateTime) {
        OrderLog orderLog = new OrderLog();
        // 未知用户
        orderLog.setUserType(UserTypeConstant.UNKNOWN_USER.getValue());
        orderLog.setOrderId(orderId);
        orderLog.setProductId(productId);
        orderLog.setProductStandardId(productStandardId);
        orderLog.setChangeNum(changeNum);
        orderLog.setOrderCycleDate(ZhioDateUtils.getOrderCycleDate(orderCreateTime));
        orderLog.setOrderCreateTime(orderCreateTime);
        orderLog.setCreateTime(new Date());
        return orderLog.save();
    }

    /**
     * 生成订单流水
     * @param type
     * @param uid
     * @param orderId
     * @param productId
     * @param productStandardId
     * @param changeNum
     * @param orderCreateTime
     * @return
     */
    private boolean getOrderLog(UserTypeConstant type, Integer uid, String orderId, Integer productId, Integer productStandardId, Integer changeNum, Date orderCreateTime) {
        OrderLog orderLog = new OrderLog();
        orderLog.setUId(uid);
        orderLog.setUserType(type.getValue());
        orderLog.setOrderId(orderId);
        orderLog.setProductId(productId);
        orderLog.setProductStandardId(productStandardId);
        orderLog.setChangeNum(changeNum);
        orderLog.setOrderCycleDate(ZhioDateUtils.getOrderCycleDate(orderCreateTime));
        orderLog.setOrderCreateTime(orderCreateTime);
        orderLog.setCreateTime(new Date());
        return orderLog.save();
    }

//    @Before(Tx.class)
//    public boolean save(OrderLog orderLog) {
//        super.save();
//        return orderLog.save();
//    }
//
//    @Before(Tx.class)
//    public boolean delete(OrderLog orderLog) {
//        super.delete();
//        return orderLog.save();
//    }
//
//    @Before(Tx.class)
//    public boolean update(OrderLog orderLog) {
//        super.update();
//        return orderLog.save();
//    }

    /**
     * 非特殊情况不可用
     * @return 是否成功
     */
    @Deprecated
    @Override
    @Before(Tx.class)
    public boolean save() {
        // 删除并添加删除的 x + orderId的订单的时候需要使用不计入日志的方法
        return super.save();
    }


    /**
     * 非特殊情况不可用
     * @return 是否成功
     */
    @Deprecated
    @Override
    @Before(Tx.class)
    public boolean delete() {
        String sql = " SELECT o.create_time from b_order o INNER JOIN b_order_detail od on o.order_id=od.order_id where od.id = ? ";
        Date orderCreateTime = Db.queryDate(sql, super.getOrderId());
        super.delete();
        return getOrderLog(super.getOrderId(), super.getProductId(), super.getProductStandardId(), ~super.getNum() + 1, orderCreateTime);
    }

    /**
     * 非特殊情况不可用
     * @return 是否成功
     */
    @Deprecated
    @Override
    @Before(Tx.class)
    public boolean update() {
        OrderDetail orderDetail = OrderDetail.dao.findById(super.getId());
        String sql = " SELECT o.create_time from b_order o INNER JOIN b_order_detail od on o.order_id=od.order_id where od.id = ? ";
        Date orderCreateTime = Db.queryDate(sql, super.getOrderId());
        super.update();
        return getOrderLog(orderDetail.getOrderId(), orderDetail.getProductId(), orderDetail.getProductStandardId(), super.getNum() - orderDetail.getNum(), orderCreateTime);
    }


    /**
     * @param type 用户类型
     * @param uid  操作人id
     * @param orderCreateTime 订单创建时间
     * @return 是否成功
     */
    @Before(Tx.class)
    public boolean save(UserTypeConstant type, Integer uid, Date orderCreateTime) {
        super.save();
        // 新增商家购买数量
        Product.dao.updateSellNum(super.getProductId(), 1);
        return getOrderLog(type, uid, super.getOrderId(), super.getProductId(), super.getProductStandardId(), super.getNum(), orderCreateTime);
    }

    /**
     *
     * @param type 用户类型
     * @param uid  操作人id
     * @param orderId   订单号
     * @param productId 商品id
     * @param productStandardId 商品规格id
     * @param num   删除数量
     * @param orderCreateTime 订单创建时间
     * @return 是否成功
     */
    @Before(Tx.class)
    public boolean delete(UserTypeConstant type, Integer uid, String orderId, Integer productId, Integer productStandardId, Integer num, Date orderCreateTime) {
        super.delete();
        return getOrderLog(type, uid, orderId, productId, productStandardId, ~num + 1, orderCreateTime);
    }

    /**
     * @param type 用户类型
     * @param uid  操作人id
     * @param orderId   订单号
     * @param productId 商品id
     * @param productStandardId 商品规格id
     * @param beforeNum 原来的数量
     * @param afterNum 现在的数量
     * @param orderCreateTime 订单创建时间
     * @return 是否成功
     */
    @Before(Tx.class)
    public boolean update(UserTypeConstant type, Integer uid, String orderId, Integer productId, Integer productStandardId, Integer beforeNum, Integer afterNum, Date orderCreateTime) {
        super.setUpdateTime(new Date());
        super.update();
        return getOrderLog(type, uid, orderId, productId, productStandardId, afterNum - beforeNum, orderCreateTime);
    }


}
