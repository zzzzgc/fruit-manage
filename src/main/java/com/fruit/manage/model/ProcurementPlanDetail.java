package com.fruit.manage.model;

import com.fruit.manage.model.base.BaseProcurementPlanDetail;
import com.jfinal.core.paragetter.IntegerGetter;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ProcurementPlanDetail extends BaseProcurementPlanDetail<ProcurementPlanDetail> {
	public static final ProcurementPlanDetail dao = new ProcurementPlanDetail().dao();

	/**
	 * 获取所有的采购计划数据
	 * @param pageNum
	 * @param pageSize
	 * @param orderBy
	 * @param isASC
	 * @param map
	 * @return
	 */
	public Page<ProcurementPlanDetail> getPPlanDetail(int pageNum, int pageSize, String orderBy, boolean isASC,Map map){
		ArrayList<Object> params = new ArrayList<Object>();
		String selectStr="select ppd.id,ppd.product_id,ppd.product_standard_id,ppd.procurement_id, " +
				"ppd.product_name,ppd.product_standard_name,ppd.sell_price,ppd.inventory_num, " +
				"(select ps.stock from b_product_standard ps where ps.id=ppd.product_standard_id) as stock, "+
				"ppd.procurement_num,ppd.product_standard_num,ppd.procurement_need_price, " +
				"ppd.procurement_total_price,ppd.order_remark,ppd.procurement_remark,ppd.create_time,ppd.update_time,u.`name` as userName ";
		StringBuilder sql=new StringBuilder();
		sql.append(" from b_procurement_plan_detail ppd, a_user u ");
		sql.append("where 1=1 and  ppd.procurement_id=u.id  and ppd.create_time BETWEEN ? and ? ");
		String [] createTimes = (String [])map.get("createTimes");
		params.add(createTimes[0]);
		params.add(createTimes[1]);
		if(StrKit.notBlank((String)map.get("userName"))){
			sql.append("and u.`name` like ? ");
			params.add("%"+map.get("userName")+"%");
		}
		if(StrKit.notBlank((String)map.get("userPhone"))){
			sql.append("and u.phone like ? ");
			params.add("%"+map.get("userPhone")+"%");
		}
		if(StrKit.notBlank((String)map.get("userID"))){
			sql.append("and u.`id` like ? ");
			params.add("%"+map.get("userID")+"%");
		}
		if(StrKit.notBlank((String)map.get("productName"))){
			sql.append("and ppd.product_name like ? ");
			params.add("%"+map.get("productName")+"%");
		}
		if(StrKit.notBlank((String)map.get("productID"))){
			sql.append("and ppd.product_id like ? ");
			params.add("%"+map.get("productID")+"%");
		}
		if(StrKit.notBlank((String)map.get("productStandardName"))){
			sql.append("and ppd.product_standard_name like ? ");
			params.add("%"+map.get("productStandardName")+"%");
		}
		if(StrKit.notBlank((String)map.get("productStandardID"))){
			sql.append("and ppd.product_standard_id like ? ");
			params.add("%"+map.get("productStandardID")+"%");
		}
		orderBy = StrKit.isBlank(orderBy) ? "ppd.create_time" : orderBy;
		sql.append("order by " + orderBy + " " + (isASC ? "" : "desc "));
		return paginate(pageNum,pageSize,selectStr,sql.toString(),params.toArray());
	}

	/**
	 * 删除采购计划
	 * @param creatTimes
	 */
	public boolean delPPlanDetail(String [] creatTimes) {
		String sql="delete FROM b_procurement_plan_detail where create_time BETWEEN ? and ? ";
		int count =Db.update(sql,creatTimes[0],creatTimes[1]);
		if(count>0){
			return true;
		}
		return  false;
	}

	/**
	 * 根据采购计划详情ID获取采购计划详情
	 * @param id 采购计划详情ID
	 * @return 采购计划详情
	 */
	public ProcurementPlanDetail getPPlanDetailByID(Integer id){
		String sql ="SELECT ppd.id,ppd.product_id,ppd.product_standard_id,ppd.procurement_id," +
				"ppd.product_name,ppd.product_standard_name,ppd.sell_price,ppd.inventory_num," +
				"ppd.procurement_num,ppd.product_standard_num,ppd.procurement_need_price," +
				"ppd.procurement_total_price,ppd.order_remark,ppd.procurement_remark,ppd.create_time," +
				"ppd.update_time FROM b_procurement_plan_detail ppd where ppd.id = ? ";
		return findFirst(sql,id);
	}

	/**
	 * 根据商品规格编号获取采购计划详情
	 * @param productStandardID
	 * @return
	 */
	public ProcurementPlanDetail getPPlanDetailByPSID(Integer productStandardID,String [] createTimes,Integer procurementID){
		StringBuilder sql =new StringBuilder();
		sql.append("select ppd.id,ppd.product_id,ppd.product_standard_id,ppd.procurement_id, ");
		sql.append("ppd.product_name,ppd.product_standard_name,ppd.sell_price,ppd.inventory_num,ppd.procurement_num,ppd.product_standard_num, ");
		sql.append("ppd.procurement_need_price,ppd.procurement_total_price,ppd.procurement_need_price,ppd.order_remark,ppd.create_time,ppd.update_time ");
		sql.append("from b_procurement_plan_detail ppd ");
		sql.append("where ppd.product_standard_id = ? ");
		sql.append("and ppd.create_time BETWEEN ? and ? ");
		if(procurementID!=null && procurementID>0){
			sql.append("AND ppd.procurement_id =? ");
			return findFirst(sql.toString(),productStandardID,createTimes[0],createTimes[1],procurementID);

		}else {
			return findFirst(sql.toString(),productStandardID,createTimes[0],createTimes[1]);
		}
	}

    /**
     * 获取规格编号和同一规格的个数
     * @param createTimes
     * @return
     */
	public List<ProcurementPlanDetail> getPSIDAndPSCount(String [] createTimes){
        StringBuilder sql=new StringBuilder();
        sql.append("SELECT ppd.product_standard_id,");
        sql.append("count(ppd.product_standard_id) as pscount ");
        sql.append("FROM b_procurement_plan_detail ppd ");
        sql.append("where 1=1 ");
        sql.append("AND ppd.create_time BETWEEN ? and ? ");
        sql.append("GROUP BY ppd.product_standard_id ");
        sql.append("ORDER BY ppd.create_time DESC");
	    return find(sql.toString(),createTimes[0],createTimes[1]);
    }

	/**
	 * 根据时间和产品规格编号获取采购计划编号和采购人员
	 * @param createTimes
	 * @param psID
	 * @return
	 */
	public List<ProcurementPlanDetail> getPPDIDAndProcurementID(String [] createTimes,Integer psID){
		StringBuilder sql=new StringBuilder();
		sql.append("select ppd.id,ppd.procurement_id from b_procurement_plan_detail ppd ");
		sql.append("where ppd.product_standard_id = ? ");
		sql.append("and ppd.create_time BETWEEN ? and ? ");
		return find(sql.toString(),psID,createTimes[0],createTimes[1]);
	}

    /**
     * 根据商品规格编号获取采购计划详情
     * @param productStandardID
     * @return
     */
    public ProcurementPlanDetail getPPlanDetail(Integer productStandardID,String [] createTimes,Integer procurementID){
        StringBuilder sql =new StringBuilder();
        List list=new ArrayList();
        sql.append("select ppd.id,ppd.product_id,ppd.product_standard_id,ppd.procurement_id, ");
        sql.append("ppd.product_name,ppd.product_standard_name,ppd.sell_price,ppd.inventory_num,ppd.procurement_num,ppd.product_standard_num, ");
        sql.append("ppd.procurement_need_price,ppd.procurement_total_price,ppd.procurement_need_price,ppd.order_remark,ppd.create_time,ppd.update_time ");
        sql.append("from b_procurement_plan_detail ppd ");
        sql.append("where ppd.product_standard_id = ? ");
        sql.append("and ppd.create_time BETWEEN ? and ? ");
        list.add(productStandardID);
        list.add(createTimes[0]);
        list.add(createTimes[1]);
        if(procurementID!=null && procurementID>0){
            sql.append("AND ppd.procurement_id =? ");
            list.add(procurementID);
        }
        return findFirst(sql.toString(),list.toArray());
    }


    /**
     * 根据日期获取所有的采购订单详情
     * @param
     * @return
     */
    public List<ProcurementPlanDetail> getAllPPlanDetail(String [] createTimes){
        StringBuilder sql =new StringBuilder();
        List list=new ArrayList();
        sql.append("select ppd.id,ppd.product_id,ppd.product_standard_id,ppd.procurement_id, ");
        sql.append("ppd.product_name,ppd.product_standard_name,ppd.sell_price,ppd.inventory_num,ppd.procurement_num,ppd.product_standard_num, ");
        sql.append("ppd.procurement_need_price,ppd.procurement_total_price,ppd.procurement_need_price,ppd.order_remark,ppd.create_time,ppd.update_time ");
        sql.append("from b_procurement_plan_detail ppd ");
        sql.append("where 1=1 ");
        sql.append("and ppd.create_time BETWEEN ? and ? ");
        list.add(createTimes[0]);
        list.add(createTimes[1]);
        return find(sql.toString(),list.toArray());
    }

    /**
     * 根据时间删除所有的采购计划
     * @param createTimes
     */
    public void delAllPPlanDetailByTime(String [] createTimes){
        String sql="DELETE from b_procurement_plan_detail where create_time BETWEEN ? and ?";
        Db.update(sql,createTimes[0],createTimes[1]);
    }
}
