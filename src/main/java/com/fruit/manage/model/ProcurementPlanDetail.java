package com.fruit.manage.model;

import com.fruit.manage.model.base.BaseProcurementPlanDetail;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;

import java.util.ArrayList;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ProcurementPlanDetail extends BaseProcurementPlanDetail<ProcurementPlanDetail> {
	public static final ProcurementPlanDetail dao = new ProcurementPlanDetail().dao();

	/**
	 * 获取所有的采购计划数据
	 * @param pageNum
	 * @param pageSize
	 * @param orderBy
	 * @param isASC
	 * @param map
	 * @return
	 */
	public Page<ProcurementPlanDetail> getPPlanDetail(int pageNum, int pageSize, String orderBy, boolean isASC,Map map){
		ArrayList<Object> params = new ArrayList<Object>();
		String selectStr="select ppd.id,ppd.product_id,ppd.product_standard_id,ppd.procurement_id, " +
				"ppd.product_name,ppd.product_standard_name,ppd.sell_price,ppd.inventory_num, " +
				"ppd.procurement_num,ppd.product_standard_num,ppd.procurement_need_price, " +
				"ppd.procurement_total_price,ppd.order_remark,ppd.procurement_remark,ppd.create_time,ppd.update_time,u.`name` as userName ";
		StringBuilder sql=new StringBuilder();
		sql.append(" from b_procurement_plan_detail ppd, a_user u ");
		sql.append("where 1=1 and  ppd.procurement_id=u.id  and ppd.create_time BETWEEN ? and ? ");
		String [] createTimes = (String [])map.get("createTimes");
		params.add(createTimes[0]);
		params.add(createTimes[1]);
		if(StrKit.notBlank((String)map.get("userName"))){
			sql.append("and u.`name` like ? ");
			params.add("%"+map.get("userName")+"%");
		}
		if(StrKit.notBlank((String)map.get("userPhone"))){
			sql.append("and u.phone like ? ");
			params.add("%"+map.get("userPhone")+"%");
		}
		if(StrKit.notBlank((String)map.get("userID"))){
			sql.append("and u.`id` like ? ");
			params.add("%"+map.get("userID")+"%");
		}
		if(StrKit.notBlank((String)map.get("productName"))){
			sql.append("and ppd.product_name like ? ");
			params.add("%"+map.get("productName")+"%");
		}
		if(StrKit.notBlank((String)map.get("productID"))){
			sql.append("and ppd.product_id like ? ");
			params.add("%"+map.get("productID")+"%");
		}
		if(StrKit.notBlank((String)map.get("productStandardName"))){
			sql.append("and ppd.product_standard_name like ? ");
			params.add("%"+map.get("productStandardName")+"%");
		}
		if(StrKit.notBlank((String)map.get("productStandardID"))){
			sql.append("and ppd.product_standard_id like ? ");
			params.add("%"+map.get("productStandardID")+"%");
		}
		orderBy = StrKit.isBlank(orderBy) ? "ppd.create_time" : orderBy;
		sql.append("order by " + orderBy + " " + (isASC ? "" : "desc "));
		return paginate(pageNum,pageSize,selectStr,sql.toString(),params.toArray());
	}

	/**
	 * 删除采购计划
	 * @param creatTimes
	 */
	public boolean delPPlanDetail(String [] creatTimes) {
		String sql="delete FROM b_procurement_plan_detail where create_time BETWEEN ? and ? ";
		int count =Db.update(sql,creatTimes[0],creatTimes[1]);
		if(count>0){
			return true;
		}
		return  false;
	}
}
