package com.fruit.manage.model;

import com.fruit.manage.model.base.BaseProcurementPlan;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ProcurementPlan extends BaseProcurementPlan<ProcurementPlan> {
    public static final ProcurementPlan dao = new ProcurementPlan().dao();

    /**
     * 获取所有的采购计划
     *
     * @param pageNum  当前第几页
     * @param pageSize 每页显示几行
     * @param orderBy  排序
     * @param isASC    是否升序
     * @param orderCycleDates 业务周期
     * @return 返回一个带分页的数据集合
     */
    public Page<ProcurementPlan> getAllProcurementPlan(int pageNum, int pageSize, String orderBy, boolean isASC, String[] orderCycleDates) {
        ArrayList<Object> params = new ArrayList<Object>();
        String selectStr = "select pp.id,pp.procurement_id,pp.order_cycle_date,pp.product_standard_num,pp.num,pp.wait_statistics_order_total,pp.order_total,pp.create_time \n";
        StringBuilder sql = new StringBuilder();
        sql.append("\tfrom b_procurement_plan pp where 1=1 \n");
        if (orderCycleDates != null && orderCycleDates.length == 2) {
            sql.append("and pp.order_cycle_date BETWEEN ? and ? ");
            params.add(orderCycleDates[0]);
            params.add(orderCycleDates[1]);
        }
        orderBy = StrKit.isBlank(orderBy) ? "pp.order_cycle_date" : orderBy;
        sql.append("order by " + orderBy + " " + (isASC ? "" : "desc "));
        return paginate(pageNum, pageSize, selectStr, sql.toString(), params.toArray());
    }

    /**
     * 获取未统计的商品总数
     */
    public Record getWaitStatisticsOrderTotal(String orderCycleDateStr) {
        StringBuilder sql = new StringBuilder();
        sql.append("select count(DISTINCT ol.order_id) AS wait_statistics_order_total ");
        sql.append("from b_order_log ol ");
        sql.append("where ol.is_statistical = 0 ");
        sql.append("and ol.order_cycle_date = ? ");
        return Db.findFirst(sql.toString(), orderCycleDateStr);
    }

    public void updateOrderLog(String orderCycleDateStr) {
        // ccz 2018-5-18 order_create_time
        String sql = "update b_order_log ol set ol.is_statistical=1 where ol.order_cycle_date = ?  ";
        Db.update(sql, orderCycleDateStr);
    }

    /**
     * 根据采购计划ID获取要导出的采购数据
     *
     * @param createTime
     * @return
     */
    public List<ProcurementPlan> getExportDataByPPlanID(String[] createTime) {
        StringBuilder sql = new StringBuilder();
        sql.append("SELECT " +
                "p.`name` AS productName, " +
                "pq.procurement_id, " +
                "pq.procurement_name, " +
                "ps.`name` AS productStandardName, " +
                "ps.id AS productStandardID, " +
                "ps.sub_title, " +
                "ps.sell_price AS sellPrice, " +
                "( " +
                "SELECT " +
                "SUM(ol2.change_num) " +
                "FROM " +
                "b_order_log ol2 " +
                "WHERE " +
                "ol2.product_standard_id = ol.product_standard_id " +
                " and ol2.order_create_time BETWEEN ? AND ? " +
                ") AS purchaseNum, " +
                "ps.stock AS inventoryNum, " +
                "(SELECT 0) AS procurementNum, " +
                "(SELECT 0) AS procurementPrice, " +
                "(SELECT '') AS procurementRemark, " +
                "p.id AS productId, " +
                "( " +
                "SELECT " +
                "SUM(ol2.change_num) " +
                "FROM " +
                "b_order_log ol2 " +
                "WHERE " +
                "ol2.product_standard_id = ol.product_standard_id " +
                " and ol2.order_create_time BETWEEN ? AND ? " +

                ") AS productStandardNum, " +
                "(SELECT 0) AS procurementNeedPrice, " +
                "(SELECT 0) AS procurementTotalPrice, " +
                // 订单详细下单备注，多个以分号拼接
                " (SELECT group_concat(CONCAT(num,measure_unit,'|',buy_remark) SEPARATOR ';')  as concatStr " +
                " from b_order_detail od2 " +
                " WHERE 1=1 and od2.order_id  = ol.order_id " +
                // 以订单创建时间为准 ccz 2018-5-18
                " and ol.order_create_time BETWEEN ? AND ? " +
                " and od2.product_standard_id in (ol.product_standard_id) " +
                " and buy_remark <> '' " +
                " )as orderRemark  " +
                "FROM " +
                "b_order_log ol, " +
                "b_product p, " +
                "b_product_standard ps, " +
                "b_procurement_quota pq " +
                "WHERE " +
                "1 = 1 " +
                "AND pq.product_standard_id = ol.product_standard_id " +
                "AND ol.product_id = p.id " +
                "AND ol.product_standard_id = ps.id " +
                "AND ol.order_create_time BETWEEN ? AND ? " +

                "GROUP BY " +
                "ol.product_standard_id " +
                "HAVING " +
                "purchaseNum > 0 " +
                "ORDER BY " +
                "pq.procurement_name ASC, " +
                "purchaseNum DESC, " +
                "ps.sell_price DESC");
        List<String> list = new ArrayList<>();
        list.add(createTime[0]);
        list.add(createTime[1]);
        list.add(createTime[0]);
        list.add(createTime[1]);
        list.add(createTime[0]);
        list.add(createTime[1]);
        list.add(createTime[0]);
        list.add(createTime[1]);
        System.out.println("-------------导出要采购的计划 START------------------");
        System.out.println(sql.toString());
        System.out.println("params:" + list.toString());
        System.out.println("-------------导出要采购的计划 END--------------------");
        return find(sql.toString(), list.toArray());
    }

    /**
     * 获取采购计划要添加的参数
     *
     * @param createTime 开始时间和结束时间
     * @return 返回一个采购计划的数据
     */
    public Record getOrderLogByPPlan(String[] createTime) {
        ArrayList<Object> params = new ArrayList<Object>();
        StringBuilder sql = new StringBuilder();
        sql.append("select (count(DISTINCT ol.product_standard_id)) as product_standard_num, ");
        sql.append("SUM(ol.change_num) as num, ");
        sql.append("sum(0) as wait_statistics_order_total, ");
        sql.append("(count(DISTINCT ol.order_id)) as order_total ");
        sql.append("from b_order_log ol ");
        sql.append("where 1=1 ");
        // sql.append("and ol.is_statistical = 0 ");
        if (org.apache.commons.lang3.ArrayUtils.isNotEmpty(createTime) && createTime.length == 2) {

            // 2018-5-18 ccz order_create_time
//            sql.append("and ol.create_time BETWEEN ? and ? ");
            sql.append("and ol.order_create_time BETWEEN ? and ? ");

            params.add(createTime[0]);
            params.add(createTime[1]);
        }
        return Db.findFirst(sql.toString(), params.toArray());
    }

    public ProcurementPlan getPPlanCreateTime(String createTime) {
        String sql = "select pp.id,pp.procurement_id,pp.product_standard_num,pp.num,pp.wait_statistics_order_total,pp.order_total,pp.create_time " +
                " from b_procurement_plan pp where 1=1 and pp.create_time = ? ";
        return findFirst(sql, createTime);
    }


    /**
     * 根据采购计划编号获取采购计划信息
     *
     * @param pPId 采购计划编号
     * @return 采购计划信息
     */
    public ProcurementPlan getPPlanById(String pPId) {
        String sql = "SELECT * from b_procurement_plan where id = ? ";
        return findFirst(sql, pPId);
    }

    /**
     * 添加采购计划
     */
    public ProcurementPlan addProcurementPlan(String id,Integer Num, Integer ProcurementId, Integer OrderTotal, Date OrderCycleDate, Integer ProductStandardNum, Integer WaitStatisticsOrderTotal) {
        ProcurementPlan procurementPlan = new ProcurementPlan();
        procurementPlan.setId(id);
        procurementPlan.setNum(Num);
        procurementPlan.setProcurementId(ProcurementId);
        procurementPlan.setOrderTotal(OrderTotal);
        procurementPlan.setOrderCycleDate(OrderCycleDate);
        procurementPlan.setProductStandardNum(ProductStandardNum);
        procurementPlan.setWaitStatisticsOrderTotal(WaitStatisticsOrderTotal);
        procurementPlan.setCreateTime(new Date());
        procurementPlan.save();
        return procurementPlan;
    }

    public List<ProcurementPlan> getExportDataByPPlanID(Date createTime) {
        String sql = "SELECT  " +
                "  p.`name` AS productName,  " +
                "  pq.procurement_id,  " +
                "  pq.procurement_name,  " +
                "  ps.`name` AS productStandardName,  " +
                "  ps.id AS productStandardID,  " +
                "  ps.sub_title,  " +
                "  ps.sell_price AS sellPrice,  " +
                "  SUM(ol.change_num) AS purchaseNum,  " +
                "  ps.stock AS inventoryNum,  " +
                "  (SELECT 0) AS procurementNum,  " +
                "  (SELECT 0) AS procurementPrice,  " +
                "  (SELECT '') AS procurementRemark,  " +
                "  p.id AS productId,  " +
                "  SUM(ol.change_num) AS productStandardNum,  " +
                "  (SELECT 0) AS procurementNeedPrice,  " +
                "  (SELECT 0) AS procurementTotalPrice,  " +
                "  (  " +
                "    SELECT  " +
                "      group_concat(  " +
                "        CONCAT(  " +
                "          num,  " +
                "          measure_unit,  " +
                "          '|',  " +
                "          buy_remark  " +
                "        ) SEPARATOR ';'  " +
                "      ) AS concatStr  " +
                "    FROM  " +
                "      b_order o  " +
                "    JOIN b_order_detail od ON od.order_id = o.order_id  " +
                "    WHERE  " +
                "      1 = 1  " +
                "    AND od.order_id = ol.order_id  " +
                "    AND o.order_cycle_date = ol.order_cycle_date  " +
                "    AND od.product_standard_id = ol.product_standard_id  " +
                "    AND buy_remark <> ''  " +
                "  ) AS orderRemark  " +
                "FROM  " +
                "  b_order_log ol  " +
                "JOIN b_product p ON p.id = ol.product_id  " +
                "JOIN b_product_standard ps ON ps.id = ol.product_standard_id  " +
                "JOIN b_procurement_quota pq ON pq.product_standard_id = ol.product_standard_id  " +
                "WHERE  " +
                "  ol.order_cycle_date = '2018-06-20'  " +
                "GROUP BY  " +
                "  ol.product_standard_id  " +
                "ORDER BY  " +
                "  pq.procurement_name ASC,  " +
                "  purchaseNum DESC,  " +
                "  ps.sell_price DESC  ";
        return find(sql, createTime);
    }

    /**
     * 根据order_cycle_date获取采购计划
     * @param orderCycleDateStr
     * @return
     */
    public ProcurementPlan getProcurementPlanByOrderCycleDate(String orderCycleDateStr) {
        return findFirst("select * from b_procurement_plan pp where pp.order_cycle_date = ? ",orderCycleDateStr);
    }
}
